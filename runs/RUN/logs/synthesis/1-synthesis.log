
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.34 (git sha1 4a1b5599258, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openlane/designs/ram/src/ram.v
Parsing SystemVerilog input from `/openlane/designs/ram/src/ram.v' to AST representation.
Generating RTLIL representation for module `\single_port_ram'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/ram/runs/RUN_2023.12.24_10.45.30/tmp/synthesis/hierarchy.dot'.
Dumping module single_port_ram to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \single_port_ram

3.2. Analyzing design hierarchy..
Top module:  \single_port_ram
Removed 0 unused modules.
Renaming module single_port_ram to single_port_ram.

4. Executing TRIBUF pass.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \single_port_ram

5.2. Analyzing design hierarchy..
Top module:  \single_port_ram
Removed 0 unused modules.

6. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openlane/designs/ram/src/ram.v:12$2 in module single_port_ram.
Removed a total of 0 dead cases.

8. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 3 assignments to connections.

9. Executing PROC_INIT pass (extract init attributes).

10. Executing PROC_ARST pass (detect async resets in processes).

11. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~1 debug messages>

12. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\single_port_ram.$proc$/openlane/designs/ram/src/ram.v:12$2'.
     1/4: $1$memwr$\ram$/openlane/designs/ram/src/ram.v:15$1_EN[7:0]$8
     2/4: $1$memwr$\ram$/openlane/designs/ram/src/ram.v:15$1_DATA[7:0]$7
     3/4: $1$memwr$\ram$/openlane/designs/ram/src/ram.v:15$1_ADDR[5:0]$6
     4/4: $0\addr_reg[5:0]

13. Executing PROC_DLATCH pass (convert process syncs to latches).

14. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\single_port_ram.\addr_reg' using process `\single_port_ram.$proc$/openlane/designs/ram/src/ram.v:12$2'.
  created $dff cell `$procdff$22' with positive edge clock.
Creating register for signal `\single_port_ram.$memwr$\ram$/openlane/designs/ram/src/ram.v:15$1_ADDR' using process `\single_port_ram.$proc$/openlane/designs/ram/src/ram.v:12$2'.
  created $dff cell `$procdff$23' with positive edge clock.
Creating register for signal `\single_port_ram.$memwr$\ram$/openlane/designs/ram/src/ram.v:15$1_DATA' using process `\single_port_ram.$proc$/openlane/designs/ram/src/ram.v:12$2'.
  created $dff cell `$procdff$24' with positive edge clock.
Creating register for signal `\single_port_ram.$memwr$\ram$/openlane/designs/ram/src/ram.v:15$1_EN' using process `\single_port_ram.$proc$/openlane/designs/ram/src/ram.v:12$2'.
  created $dff cell `$procdff$25' with positive edge clock.

15. Executing PROC_MEMWR pass (convert process memory writes to cells).

16. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\single_port_ram.$proc$/openlane/designs/ram/src/ram.v:12$2'.
Removing empty process `single_port_ram.$proc$/openlane/designs/ram/src/ram.v:12$2'.
Cleaned up 1 empty switch.

17. Executing CHECK pass (checking for obvious problems).
Checking module single_port_ram...
Found and reported 0 problems.

18. Executing OPT_EXPR pass (perform const folding).
Optimizing module single_port_ram.

19. Executing FLATTEN pass (flatten design).

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module single_port_ram.

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_ram..
Removed 3 unused cells and 15 unused wires.
<suppressed ~4 debug messages>

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module single_port_ram.

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\single_port_ram'.
Removed a total of 0 cells.

22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \single_port_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \single_port_ram.
    Consolidated identical input bits for $mux cell $procmux$11:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\ram$/openlane/designs/ram/src/ram.v:15$1_EN[7:0]$5
      New ports: A=1'0, B=1'1, Y=$0$memwr$\ram$/openlane/designs/ram/src/ram.v:15$1_EN[7:0]$5 [0]
      New connections: $0$memwr$\ram$/openlane/designs/ram/src/ram.v:15$1_EN[7:0]$5 [7:1] = { $0$memwr$\ram$/openlane/designs/ram/src/ram.v:15$1_EN[7:0]$5 [0] $0$memwr$\ram$/openlane/designs/ram/src/ram.v:15$1_EN[7:0]$5 [0] $0$memwr$\ram$/openlane/designs/ram/src/ram.v:15$1_EN[7:0]$5 [0] $0$memwr$\ram$/openlane/designs/ram/src/ram.v:15$1_EN[7:0]$5 [0] $0$memwr$\ram$/openlane/designs/ram/src/ram.v:15$1_EN[7:0]$5 [0] $0$memwr$\ram$/openlane/designs/ram/src/ram.v:15$1_EN[7:0]$5 [0] $0$memwr$\ram$/openlane/designs/ram/src/ram.v:15$1_EN[7:0]$5 [0] }
  Optimizing cells in module \single_port_ram.
Performed a total of 1 changes.

22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\single_port_ram'.
Removed a total of 0 cells.

22.6. Executing OPT_DFF pass (perform DFF optimizations).

22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_ram..

22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module single_port_ram.

22.9. Rerunning OPT passes. (Maybe there is more to do..)

22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \single_port_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \single_port_ram.
Performed a total of 0 changes.

22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\single_port_ram'.
Removed a total of 0 cells.

22.13. Executing OPT_DFF pass (perform DFF optimizations).

22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_ram..

22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module single_port_ram.

22.16. Finished OPT passes. (There is nothing left to do.)

23. Executing FSM pass (extract and optimize FSM).

23.1. Executing FSM_DETECT pass (finding FSMs in design).

23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_ram..

23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module single_port_ram.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\single_port_ram'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \single_port_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \single_port_ram.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\single_port_ram'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$22 ($dff) from module single_port_ram (D = \addr, Q = \addr_reg).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_ram..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module single_port_ram.

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \single_port_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \single_port_ram.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\single_port_ram'.
Removed a total of 0 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_ram..

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module single_port_ram.

24.16. Finished OPT passes. (There is nothing left to do.)

25. Executing WREDUCE pass (reducing word size of cells).

26. Executing PEEPOPT pass (run peephole optimizers).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_ram..

28. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module single_port_ram:
  created 0 $alu and 0 $macc cells.

29. Executing SHARE pass (SAT-based resource sharing).

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module single_port_ram.

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\single_port_ram'.
Removed a total of 0 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \single_port_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \single_port_ram.
Performed a total of 0 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\single_port_ram'.
Removed a total of 0 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_ram..

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module single_port_ram.

30.9. Finished OPT passes. (There is nothing left to do.)

31. Executing MEMORY pass.

31.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

31.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

31.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing single_port_ram.ram write port 0.

31.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

31.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\ram'[0] in module `\single_port_ram': no output FF found.
Checking read port address `\ram'[0] in module `\single_port_ram': merged address FF to cell.

31.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_ram..

31.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

31.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

31.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_ram..

31.10. Executing MEMORY_COLLECT pass (generating $mem cells).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_ram..

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module single_port_ram.
<suppressed ~3 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\single_port_ram'.
Removed a total of 0 cells.

33.3. Executing OPT_DFF pass (perform DFF optimizations).

33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_ram..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

33.5. Finished fast OPT passes.

34. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \ram in module \single_port_ram:
  created 64 $dff cells and 0 static cells of width 8.
Extracted addr FF from read port 0 of single_port_ram.ram: $\ram$rdreg[0]
  read interface: 1 $dff and 63 $mux cells.
  write interface: 64 write mux blocks.

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module single_port_ram.
<suppressed ~12 debug messages>

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\single_port_ram'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \single_port_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~66 debug messages>

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \single_port_ram.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\single_port_ram'.
Removed a total of 0 cells.

35.6. Executing OPT_SHARE pass.

35.7. Executing OPT_DFF pass (perform DFF optimizations).

35.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_ram..
Removed 0 unused cells and 134 unused wires.
<suppressed ~1 debug messages>

35.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module single_port_ram.

35.10. Rerunning OPT passes. (Maybe there is more to do..)

35.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \single_port_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~66 debug messages>

35.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \single_port_ram.
Performed a total of 0 changes.

35.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\single_port_ram'.
Removed a total of 0 cells.

35.14. Executing OPT_SHARE pass.

35.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\ram[9]$50 ($dff) from module single_port_ram (D = \data, Q = \ram[9]).
Adding EN signal on $memory\ram[8]$48 ($dff) from module single_port_ram (D = \data, Q = \ram[8]).
Adding EN signal on $memory\ram[7]$46 ($dff) from module single_port_ram (D = \data, Q = \ram[7]).
Adding EN signal on $memory\ram[6]$44 ($dff) from module single_port_ram (D = \data, Q = \ram[6]).
Adding EN signal on $memory\ram[63]$158 ($dff) from module single_port_ram (D = \data, Q = \ram[63]).
Adding EN signal on $memory\ram[62]$156 ($dff) from module single_port_ram (D = \data, Q = \ram[62]).
Adding EN signal on $memory\ram[61]$154 ($dff) from module single_port_ram (D = \data, Q = \ram[61]).
Adding EN signal on $memory\ram[60]$152 ($dff) from module single_port_ram (D = \data, Q = \ram[60]).
Adding EN signal on $memory\ram[5]$42 ($dff) from module single_port_ram (D = \data, Q = \ram[5]).
Adding EN signal on $memory\ram[59]$150 ($dff) from module single_port_ram (D = \data, Q = \ram[59]).
Adding EN signal on $memory\ram[58]$148 ($dff) from module single_port_ram (D = \data, Q = \ram[58]).
Adding EN signal on $memory\ram[57]$146 ($dff) from module single_port_ram (D = \data, Q = \ram[57]).
Adding EN signal on $memory\ram[56]$144 ($dff) from module single_port_ram (D = \data, Q = \ram[56]).
Adding EN signal on $memory\ram[55]$142 ($dff) from module single_port_ram (D = \data, Q = \ram[55]).
Adding EN signal on $memory\ram[54]$140 ($dff) from module single_port_ram (D = \data, Q = \ram[54]).
Adding EN signal on $memory\ram[53]$138 ($dff) from module single_port_ram (D = \data, Q = \ram[53]).
Adding EN signal on $memory\ram[52]$136 ($dff) from module single_port_ram (D = \data, Q = \ram[52]).
Adding EN signal on $memory\ram[51]$134 ($dff) from module single_port_ram (D = \data, Q = \ram[51]).
Adding EN signal on $memory\ram[50]$132 ($dff) from module single_port_ram (D = \data, Q = \ram[50]).
Adding EN signal on $memory\ram[4]$40 ($dff) from module single_port_ram (D = \data, Q = \ram[4]).
Adding EN signal on $memory\ram[49]$130 ($dff) from module single_port_ram (D = \data, Q = \ram[49]).
Adding EN signal on $memory\ram[48]$128 ($dff) from module single_port_ram (D = \data, Q = \ram[48]).
Adding EN signal on $memory\ram[47]$126 ($dff) from module single_port_ram (D = \data, Q = \ram[47]).
Adding EN signal on $memory\ram[46]$124 ($dff) from module single_port_ram (D = \data, Q = \ram[46]).
Adding EN signal on $memory\ram[45]$122 ($dff) from module single_port_ram (D = \data, Q = \ram[45]).
Adding EN signal on $memory\ram[44]$120 ($dff) from module single_port_ram (D = \data, Q = \ram[44]).
Adding EN signal on $memory\ram[43]$118 ($dff) from module single_port_ram (D = \data, Q = \ram[43]).
Adding EN signal on $memory\ram[42]$116 ($dff) from module single_port_ram (D = \data, Q = \ram[42]).
Adding EN signal on $memory\ram[41]$114 ($dff) from module single_port_ram (D = \data, Q = \ram[41]).
Adding EN signal on $memory\ram[40]$112 ($dff) from module single_port_ram (D = \data, Q = \ram[40]).
Adding EN signal on $memory\ram[3]$38 ($dff) from module single_port_ram (D = \data, Q = \ram[3]).
Adding EN signal on $memory\ram[39]$110 ($dff) from module single_port_ram (D = \data, Q = \ram[39]).
Adding EN signal on $memory\ram[38]$108 ($dff) from module single_port_ram (D = \data, Q = \ram[38]).
Adding EN signal on $memory\ram[37]$106 ($dff) from module single_port_ram (D = \data, Q = \ram[37]).
Adding EN signal on $memory\ram[36]$104 ($dff) from module single_port_ram (D = \data, Q = \ram[36]).
Adding EN signal on $memory\ram[35]$102 ($dff) from module single_port_ram (D = \data, Q = \ram[35]).
Adding EN signal on $memory\ram[34]$100 ($dff) from module single_port_ram (D = \data, Q = \ram[34]).
Adding EN signal on $memory\ram[33]$98 ($dff) from module single_port_ram (D = \data, Q = \ram[33]).
Adding EN signal on $memory\ram[32]$96 ($dff) from module single_port_ram (D = \data, Q = \ram[32]).
Adding EN signal on $memory\ram[31]$94 ($dff) from module single_port_ram (D = \data, Q = \ram[31]).
Adding EN signal on $memory\ram[30]$92 ($dff) from module single_port_ram (D = \data, Q = \ram[30]).
Adding EN signal on $memory\ram[2]$36 ($dff) from module single_port_ram (D = \data, Q = \ram[2]).
Adding EN signal on $memory\ram[29]$90 ($dff) from module single_port_ram (D = \data, Q = \ram[29]).
Adding EN signal on $memory\ram[28]$88 ($dff) from module single_port_ram (D = \data, Q = \ram[28]).
Adding EN signal on $memory\ram[27]$86 ($dff) from module single_port_ram (D = \data, Q = \ram[27]).
Adding EN signal on $memory\ram[26]$84 ($dff) from module single_port_ram (D = \data, Q = \ram[26]).
Adding EN signal on $memory\ram[25]$82 ($dff) from module single_port_ram (D = \data, Q = \ram[25]).
Adding EN signal on $memory\ram[24]$80 ($dff) from module single_port_ram (D = \data, Q = \ram[24]).
Adding EN signal on $memory\ram[23]$78 ($dff) from module single_port_ram (D = \data, Q = \ram[23]).
Adding EN signal on $memory\ram[22]$76 ($dff) from module single_port_ram (D = \data, Q = \ram[22]).
Adding EN signal on $memory\ram[21]$74 ($dff) from module single_port_ram (D = \data, Q = \ram[21]).
Adding EN signal on $memory\ram[20]$72 ($dff) from module single_port_ram (D = \data, Q = \ram[20]).
Adding EN signal on $memory\ram[1]$34 ($dff) from module single_port_ram (D = \data, Q = \ram[1]).
Adding EN signal on $memory\ram[19]$70 ($dff) from module single_port_ram (D = \data, Q = \ram[19]).
Adding EN signal on $memory\ram[18]$68 ($dff) from module single_port_ram (D = \data, Q = \ram[18]).
Adding EN signal on $memory\ram[17]$66 ($dff) from module single_port_ram (D = \data, Q = \ram[17]).
Adding EN signal on $memory\ram[16]$64 ($dff) from module single_port_ram (D = \data, Q = \ram[16]).
Adding EN signal on $memory\ram[15]$62 ($dff) from module single_port_ram (D = \data, Q = \ram[15]).
Adding EN signal on $memory\ram[14]$60 ($dff) from module single_port_ram (D = \data, Q = \ram[14]).
Adding EN signal on $memory\ram[13]$58 ($dff) from module single_port_ram (D = \data, Q = \ram[13]).
Adding EN signal on $memory\ram[12]$56 ($dff) from module single_port_ram (D = \data, Q = \ram[12]).
Adding EN signal on $memory\ram[11]$54 ($dff) from module single_port_ram (D = \data, Q = \ram[11]).
Adding EN signal on $memory\ram[10]$52 ($dff) from module single_port_ram (D = \data, Q = \ram[10]).
Adding EN signal on $memory\ram[0]$32 ($dff) from module single_port_ram (D = \data, Q = \ram[0]).

35.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_ram..
Removed 64 unused cells and 64 unused wires.
<suppressed ~65 debug messages>

35.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module single_port_ram.

35.18. Rerunning OPT passes. (Maybe there is more to do..)

35.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \single_port_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

35.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \single_port_ram.
Performed a total of 0 changes.

35.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\single_port_ram'.
Removed a total of 0 cells.

35.22. Executing OPT_SHARE pass.

35.23. Executing OPT_DFF pass (perform DFF optimizations).

35.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_ram..

35.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module single_port_ram.

35.26. Finished OPT passes. (There is nothing left to do.)

36. Executing TECHMAP pass (map to technology primitives).

36.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

36.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~361 debug messages>

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module single_port_ram.

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\single_port_ram'.
Removed a total of 0 cells.

37.3. Executing OPT_DFF pass (perform DFF optimizations).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_ram..

37.5. Finished fast OPT passes.

38. Executing ABC pass (technology mapping using ABC).

38.1. Extracting gate netlist of module `\single_port_ram' to `<abc-temp-dir>/input.blif'..
Extracted 668 gates and 1199 wires to a netlist network with 531 inputs and 78 outputs.

38.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

38.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:      510
ABC RESULTS:               NOT cells:        7
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:              NAND cells:        2
ABC RESULTS:                OR cells:       82
ABC RESULTS:            ANDNOT cells:       64
ABC RESULTS:        internal signals:      590
ABC RESULTS:           input signals:      531
ABC RESULTS:          output signals:       78
Removing temp directory.

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module single_port_ram.
<suppressed ~248 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\single_port_ram'.
Removed a total of 0 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_ram..
Removed 5 unused cells and 765 unused wires.
<suppressed ~6 debug messages>

39.5. Finished fast OPT passes.

40. Executing HIERARCHY pass (managing design hierarchy).

40.1. Analyzing design hierarchy..
Top module:  \single_port_ram

40.2. Analyzing design hierarchy..
Top module:  \single_port_ram
Removed 0 unused modules.

41. Printing statistics.

=== single_port_ram ===

   Number of wires:                727
   Number of wire bits:           1204
   Number of public wires:          70
   Number of public wire bits:     542
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1188
     $_ANDNOT_                      64
     $_DFFE_PN_                      6
     $_DFFE_PP_                    512
     $_DFF_P_                        6
     $_MUX_                        510
     $_NAND_                         2
     $_NOT_                          2
     $_ORNOT_                        4
     $_OR_                          82

42. Executing CHECK pass (checking for obvious problems).
Checking module single_port_ram...
Found and reported 0 problems.

43. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/ram/runs/RUN_2023.12.24_10.45.30/tmp/synthesis/post_techmap.dot'.
Dumping module single_port_ram to page 1.

44. Executing SHARE pass (SAT-based resource sharing).

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module single_port_ram.

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\single_port_ram'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \single_port_ram..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \single_port_ram.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\single_port_ram'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_ram..

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module single_port_ram.

45.9. Finished OPT passes. (There is nothing left to do.)

46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_ram..

47. Printing statistics.

=== single_port_ram ===

   Number of wires:                727
   Number of wire bits:           1204
   Number of public wires:          70
   Number of public wire bits:     542
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1188
     $_ANDNOT_                      64
     $_DFFE_PN_                      6
     $_DFFE_PP_                    512
     $_DFF_P_                        6
     $_MUX_                        510
     $_NAND_                         2
     $_NOT_                          2
     $_ORNOT_                        4
     $_OR_                          82

mapping tbuf

48. Executing TECHMAP pass (map to technology primitives).

48.1. Executing Verilog-2005 frontend: /home/mechx/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/mechx/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

48.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

49. Executing SIMPLEMAP pass (map simple cells to gate primitives).

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /home/mechx/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/mechx/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

52.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\single_port_ram':
  mapped 524 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

53. Printing statistics.

=== single_port_ram ===

   Number of wires:               1245
   Number of wire bits:           1722
   Number of public wires:          70
   Number of public wire bits:     542
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1706
     $_ANDNOT_                      64
     $_MUX_                       1028
     $_NAND_                         2
     $_NOT_                          2
     $_ORNOT_                        4
     $_OR_                          82
     sky130_fd_sc_hd__dfxtp_2      524

[INFO]: USING STRATEGY AREA 0

54. Executing ABC pass (technology mapping using ABC).

54.1. Extracting gate netlist of module `\single_port_ram' to `/tmp/yosys-abc-soXWWO/input.blif'..
Extracted 1182 gates and 1721 wires to a netlist network with 539 inputs and 532 outputs.

54.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-soXWWO/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-soXWWO/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-soXWWO/input.blif 
ABC: + read_lib -w /openlane/designs/ram/runs/RUN_2023.12.24_10.45.30/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.15 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/ram/runs/RUN_2023.12.24_10.45.30/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.21 sec
ABC: Memory =    9.54 MB. Time =     0.21 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/ram/runs/RUN_2023.12.24_10.45.30/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/ram/runs/RUN_2023.12.24_10.45.30/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000.0 
ABC: Current delay (2269.02 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   1726 ( 38.3 %)   Cap = 12.0 ff ( 11.7 %)   Area =    14243.66 ( 57.4 %)   Delay =  2229.95 ps  (  1.7 %)               
ABC: Path  0 --       3 : 0    9 pi                       A =   0.00  Df =  78.8  -42.6 ps  S = 116.6 ps  Cin =  0.0 ff  Cout =  24.3 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    1607 : 1   10 sky130_fd_sc_hd__inv_2   A =   3.75  Df = 168.5  -10.4 ps  S = 131.6 ps  Cin =  4.5 ff  Cout =  27.7 ff  Cmax = 331.4 ff  G =  592  
ABC: Path  2 --    1966 : 4    5 sky130_fd_sc_hd__or4_2   A =   8.76  Df = 919.2 -456.4 ps  S = 159.2 ps  Cin =  1.5 ff  Cout =  20.1 ff  Cmax = 310.4 ff  G = 1276  
ABC: Path  3 --    2018 : 4    8 sky130_fd_sc_hd__or4bb_2 A =  12.51  Df =1665.5 -989.1 ps  S = 170.4 ps  Cin =  1.5 ff  Cout =  26.8 ff  Cmax = 312.2 ff  G = 1729  
ABC: Path  4 --    2019 : 3    1 sky130_fd_sc_hd__mux2_2  A =  11.26  Df =2011.0-1083.1 ps  S =  45.6 ps  Cin =  2.3 ff  Cout =   2.2 ff  Cmax = 297.6 ff  G =   92  
ABC: Path  5 --    2020 : 1    1 sky130_fd_sc_hd__buf_1   A =   3.75  Df =2230.0 -980.8 ps  S = 396.5 ps  Cin =  2.1 ff  Cout =  33.4 ff  Cmax = 130.0 ff  G = 1590  
ABC: Start-point = pi2 (\we).  End-point = po182 ($auto$rtlil.cc:2669:MuxGate$3146).
ABC: + print_stats -m 
ABC: netlist                       : i/o =  539/  532  lat =    0  nd =  1726  edge =   4041  area =14241.35  delay = 7.00  lev = 7
ABC: + write_blif /tmp/yosys-abc-soXWWO/output.blif 

54.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       30
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:       32
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:       40
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       52
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:       40
ABC RESULTS:   sky130_fd_sc_hd__mux4_2 cells:       70
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:       20
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       30
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       28
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nor2b_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       34
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       28
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:      612
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:      653
ABC RESULTS:        internal signals:      650
ABC RESULTS:           input signals:      539
ABC RESULTS:          output signals:      532
Removing temp directory.

55. Executing SETUNDEF pass (replace undef values with defined constants).

56. Executing HILOMAP pass (mapping to constant drivers).

57. Executing SPLITNETS pass (splitting up multi-bit signals).

58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_ram..
Removed 0 unused cells and 1721 unused wires.
<suppressed ~1 debug messages>

59. Executing INSBUF pass (insert buffer cells for connected wires).

60. Executing CHECK pass (checking for obvious problems).
Checking module single_port_ram...
Warning: Wire single_port_ram.\q [7] is used but has no driver.
Warning: Wire single_port_ram.\q [6] is used but has no driver.
Warning: Wire single_port_ram.\q [5] is used but has no driver.
Warning: Wire single_port_ram.\q [4] is used but has no driver.
Warning: Wire single_port_ram.\q [3] is used but has no driver.
Warning: Wire single_port_ram.\q [2] is used but has no driver.
Warning: Wire single_port_ram.\q [1] is used but has no driver.
Warning: Wire single_port_ram.\q [0] is used but has no driver.
Found and reported 8 problems.

61. Printing statistics.

=== single_port_ram ===

   Number of wires:               2247
   Number of wire bits:           2266
   Number of public wires:         523
   Number of public wire bits:     542
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2250
     sky130_fd_sc_hd__a211o_2       12
     sky130_fd_sc_hd__a21o_2        52
     sky130_fd_sc_hd__a22o_2        30
     sky130_fd_sc_hd__a32o_2         2
     sky130_fd_sc_hd__and2_2        30
     sky130_fd_sc_hd__and2b_2       40
     sky130_fd_sc_hd__and3_2         4
     sky130_fd_sc_hd__and3b_2        4
     sky130_fd_sc_hd__and4b_2        2
     sky130_fd_sc_hd__and4bb_2       1
     sky130_fd_sc_hd__buf_1        653
     sky130_fd_sc_hd__dfxtp_2      524
     sky130_fd_sc_hd__inv_2          8
     sky130_fd_sc_hd__mux2_2       612
     sky130_fd_sc_hd__mux4_2        70
     sky130_fd_sc_hd__nand2_2       34
     sky130_fd_sc_hd__nor2_2        28
     sky130_fd_sc_hd__nor2b_2        5
     sky130_fd_sc_hd__nor3_2         1
     sky130_fd_sc_hd__o21a_2        32
     sky130_fd_sc_hd__o21ba_2       20
     sky130_fd_sc_hd__o221a_2       40
     sky130_fd_sc_hd__o31a_2         8
     sky130_fd_sc_hd__or2_2         28
     sky130_fd_sc_hd__or3_2          3
     sky130_fd_sc_hd__or3b_2         4
     sky130_fd_sc_hd__or4_2          2
     sky130_fd_sc_hd__or4bb_2        1

   Chip area for module '\single_port_ram': 25389.350400

62. Executing Verilog backend.
Dumping module `\single_port_ram'.

Warnings: 8 unique messages, 8 total
End of script. Logfile hash: 204293e09f, CPU: user 1.54s system 0.11s, MEM: 33.31 MB peak
Yosys 0.34 (git sha1 4a1b5599258, gcc 8.3.1 -fPIC -Os)
Time spent: 72% 2x abc (3 sec), 6% 19x opt_expr (0 sec), ...
